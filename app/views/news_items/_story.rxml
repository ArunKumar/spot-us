xml.story {
  
  apply_fragment ['story_header_api_', news_item] do
    xml.headline news_item.headline
    xml.createdAt news_item.created_at
    xml.permaLink news_item_path(news_item, {:only_path => false})

    xml.reporter{
        xml.fullName news_item.user.full_name
        xml.permaLink profile_path(news_item.user, {:only_path => false})
    }

    xml.editor {
      xml.fullName news_item.peer_reviewer.full_name
      xml.permaLink profile_path(news_item.peer_reviewer, {:only_path => false})
    } if news_item.peer_reviewer

  end
  
  xml.shortDescription h(news_item.short_description)

  apply_fragment ['story_pitch_api_', news_item] do
    xml.pitch{
      xml.headline news_item.pitch.headline
      xml.createdAt news_item.pitch.created_at
      xml.permaLink story_path(news_item.pitch, {:only_path => false})
      xml.reporter{
          xml.fullName news_item.user.full_name
          xml.permaLink profile_path(news_item.user, {:only_path => false})
      }
      xml.editor {
        xml.fullName news_item.peer_reviewer.full_name
        xml.permaLink profile_path(news_item.peer_reviewer, {:only_path => false})
      } if news_item.peer_reviewer

      xml.shortDescription h(news_item.short_description)

    } if news_item.pitch
  end

  xml.supporters{
    xml.organizationSupporters {
      if news_item.supporting_organizations.any? || news_item.donations_and_credits.from_organizations.any? 
        news_item.organizational_donors.each do |supporter|
          apply_fragment ['story_organizational_donor_api_', supporter] do
            xml.organizationalDonor{
              xml.fullName supporter.full_name
              xml.permaLink profile_path(supporter, {:only_path => false})
              xml.avatar supporter.photo.url(:thumb)
              xml.donationAmount number_to_currency(supporter.amount_donated_to(news_item))
            }
          end
        end
        news_item.supporting_organizations.each do |supporter|
          apply_fragment ['story_organizational_supporter_api_', supporter] do
            xml.organizationalSupporter{
              xml.fullName supporter.full_name
              xml.permaLink profile_path(supporter, {:only_path => false})
              xml.avatar supporter.photo.url(:thumb)
            }
          end
        end
      end
    }
    xml.groupSupporters {
      news_item.donating_groups.each do |group|
        apply_fragment ['story_group_donor_api_', group] do
          xml.groupDonor {
            xml.groupName group.name 
            xml.permaLink group_path(group, { :only_path => false })
            xml.avatar group.image.url(:thumb)
            xml.donationAmount number_to_currency(group.donations_for_news_item(news_item))
          }
        end
      end
    }
    xml.ccaSupporters {
      xml.totalAmountDonated number_to_currency(Donation.cca_supporters(news_item.id).map{ |obj| obj.cca_total_amount.to_f }.sum)
      if !Donation.cca_supporters(news_item.id).all.empty?
        via_cca_supporters_for(news_item).each do |donation|
          apply_fragment ['story_cca_supporter_api_', donation] do
            xml.ccaSupporter{
              xml.ccaTitle donation.cca.title 
              xml.permaLink cca_path(donation.cca, { :only_path => false })
              xml.avatar donation.cca.user.photo.url(:thumb)
              xml.donationAmount number_to_currency(donation.cca_total_amount)
            }
          end
        end
      end
    }
    xml.publicSupporters {
      xml.totalAmountDonated number_to_currency(news_item.total_amount_donated)
      if citizen_supporters_for(news_item).any?
        citizen_supporters_for(news_item).each do |supporter|
          apply_fragment ['story_public_supporter_api_', supporter] do
            xml.publicSupporter{
              xml.fullName supporter.full_name
              xml.permaLink profile_path(supporter, {:only_path => false})
              xml.avatar supporter.photo.url(:thumb)
              xml.donationAmount number_to_currency(supporter.amount_donated_to(news_item))
            }
          end
        end
      end
    }
  }

}